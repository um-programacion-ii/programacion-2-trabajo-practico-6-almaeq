services:
  # ======== BASES DE DATOS ========
  mysql:
    image: mysql:8.4
    container_name: microservices_mysql
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: microservices_db
      MYSQL_USER: microservices_user
      MYSQL_PASSWORD: microservices_pass
      TZ: America/Argentina/Mendoza
    ports:
      - "3307:3306"   # host:container
    volumes:
      - mysql_data:/var/lib/mysql
      # - ./mysql/init:/docker-entrypoint-initdb.d:ro  # opcional: scripts .sql/.sh
    networks:
      - microservices_network
    restart: unless-stopped
    healthcheck:
      # Usamos root y TCP para evitar socket unix
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 --protocol=TCP -u root -p$${MYSQL_ROOT_PASSWORD} --silent"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    # command: ["mysqld", "--default-authentication-plugin=mysql_native_password"]  # opcional

  postgres:
    image: postgres:16
    container_name: microservices_postgres
    environment:
      POSTGRES_DB: microservices_db
      POSTGRES_USER: microservices_user
      POSTGRES_PASSWORD: microservices_pass
      TZ: America/Argentina/Mendoza
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./postgres/init:/docker-entrypoint-initdb.d:ro  # opcional
    networks:
      - microservices_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h 127.0.0.1 -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  # ======== MICROSERVICIOS ========
  data:
    build:
      context: ./dataService
    container_name: data-service
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      TZ: America/Argentina/Mendoza
      SPRING_PROFILES_ACTIVE: prod
      # ConexiÃ³n MySQL (dentro de la red de Docker)
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/microservices_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=America/Argentina/Mendoza
      SPRING_DATASOURCE_USERNAME: microservices_user
      SPRING_DATASOURCE_PASSWORD: microservices_pass

      # ðŸ‘‰ Exponer /actuator/health sin tocar ymls
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: "true"
    ports:
      - "8081:8080"
    networks:
      - microservices_network
    restart: unless-stopped
    healthcheck:
      # ðŸ‘‰ usar curl (tu imagen lo tiene)
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"'" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 25s

  business:
    build:
      context: ./businessService
    container_name: business-service
    depends_on:
      postgres:
        condition: service_healthy
      data:
        condition: service_healthy
    environment:
      TZ: America/Argentina/Mendoza
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/microservices_db
      SPRING_DATASOURCE_USERNAME: microservices_user
      SPRING_DATASOURCE_PASSWORD: microservices_pass
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQL8Dialect


      # Llamar al data por su nombre de servicio interno ("data")
      DATA_SERVICE_URL: http://data:8080

      # ðŸ‘‰ Exponer /actuator/health
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info
      MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: "true"
    ports:
      - "8082:8080"
    networks:
      - microservices_network
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"'" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 25s

volumes:
  mysql_data:
  postgres_data:

networks:
  microservices_network:
    driver: bridge